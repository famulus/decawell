//////////////////////////////////////////////////////////////////////////
// Auto-generated by RAD
//////////////////////////////////////////////////////////////////////////
#include <WProgram.h>

#include <SoftwareSerial.h>

//////////////////////////////////////////////////////////////////////////
// plugin directives
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// method signatures
//////////////////////////////////////////////////////////////////////////
void loop();
void setup();
// sketch signatures
int main();
int led();
// plugin signatures

//////////////////////////////////////////////////////////////////////////
// plugin structs
//////////////////////////////////////////////////////////////////////////
void loop();

//////////////////////////////////////////////////////////////////////////
// plugin external variables
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// sketch external variables
//////////////////////////////////////////////////////////////////////////
int __buffer;
char* __char_data = "o";
int __amps = 0;

// servo_settings array

// debounce array

// hysteresis array

// spectrasymbol soft pot array


//////////////////////////////////////////////////////////////////////////
// variable and accessors
//////////////////////////////////////////////////////////////////////////
int _led = 3;

int led() {
	return _led;
}

//////////////////////////////////////////////////////////////////////////
// assembler declarations
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// setup
//////////////////////////////////////////////////////////////////////////
void setup() {
	// pin modes
	pinMode(3, OUTPUT);
	// other setup
Serial.begin(9600);
}

//////////////////////////////////////////////////////////////////////////
// helper methods
//////////////////////////////////////////////////////////////////////////

// RAD built-in helpers


//////////////////////////////////////////////////////////////////////////
// plugin methods
//////////////////////////////////////////////////////////////////////////

// serial helpers
int serial_available() {
          return (Serial.available() > 0);
        }
        
        char serial_read() {
          return (char) Serial.read();
        }
        
        void serial_flush() {
          return Serial.flush();
        }

        void serial_print( char str ) {
          return Serial.print( str );
        }

        void serial_print( char* str ) {
          return Serial.print( str );
        }

        void serial_print( int i ) {
          return Serial.print( i );
        }

        void serial_print( long i ) {
          return Serial.print( i );
        }

      	void serial_println( char* str ) {
          return Serial.println( str );
        }

        void serial_println( char str ) {
          return Serial.println( str );
        }

      	void serial_println( int i ) {
          return Serial.println( i );
        }

        void serial_println( long i ) {
          return Serial.println( i );
        }

        void serial_print( unsigned long i ) {
          return Serial.print( i );
        }


//////////////////////////////////////////////////////////////////////////
// main() function
//////////////////////////////////////////////////////////////////////////
int main() {
	init();
	setup();
	for( ;; ) { loop(); }
	return 0;
}

//////////////////////////////////////////////////////////////////////////
// loop!  Autogenerated by RubyToC, sorry it's ugly.
//////////////////////////////////////////////////////////////////////////
void
loop() {
if (serial_available()) {
__buffer = serial_read();
__char_data = __buffer;
serial_println(__char_data);
};
analogWrite(led(), 2);
}
